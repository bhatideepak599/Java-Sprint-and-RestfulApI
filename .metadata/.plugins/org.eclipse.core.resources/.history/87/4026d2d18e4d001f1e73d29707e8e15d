package com.techlabs.app.service;
import java.util.List;
import java.util.Optional;
import org.springframework.stereotype.Service;
import com.techlabs.app.entity.Employee;
import com.techlabs.app.repository.EmployeeRepository;

@Service
public class EmployeeServiceImpl implements EmployeeService {
	private EmployeeRepository employeeRepository;

	public EmployeeServiceImpl(EmployeeRepository employeeRepository) {
		super();
		this.employeeRepository = employeeRepository;
	}

	@Override
	public List<Employee> getAllEmployees() {
		return employeeRepository.findAll();
	}

	@Override
	public Employee getEmployeeById(int id) {
		Optional<Employee> byId = employeeRepository.findById(id);
		if (byId.isPresent())
			return byId.get();
		return null;

	}

	@Override
	public Employee saveAndUpdateEmployee(Employee employee) {
		return employeeRepository.save(employee);
		
	}

	@Override
	public void deleteEmployee(int id) {
		employeeRepository.deleteById(id);

	}

	@Override
	public List<Employee> findEmployeeByFirstName(String name) {
		
		return employeeRepository.findEmployeeByName(name);
	}

	@Override
	public List<Employee> findEmployeeByEmail(String email) {
		
		return employeeRepository.findEmployeeByEmail(email);
		
	}

	@Override
	public List<Employee> findAllActiveEmployee(boolean active) {
		return employeeRepository.findEmployeeByActive(active);
		
	}

	@Override
	public List<Employee> findEmployeeNameStartingWith(String s) {
		employeeRepository.findByNameStartingWith(s);
		return null;
	}

//	@Override
//	public List<Employee> findBySalaryGreaterThanAndDesignationName(double salary, String department) {
//		return employeeRepository.findBySalaryGreaterThanAndDesignation(salary, department);
//	}

	@Override
	public List<Employee> findEmployeeSalaryBetween(double start, double end) {
		
		return employeeRepository.findBySalaryBetween(start, end);
	}

	@Override
	public int countActiveEmployees() {
		return employeeRepository.countByActiveTrue();
	}

	@Override
	public int countByDesignationAndActiveTrue(String s) {
		return employeeRepository.countByDesignationAndActiveTrue(s);
	}

	@Override
	public List<Employee> findBySalaryGreaterThanAndActiveTrue(double start) {
		return employeeRepository.findBySalaryGreaterThanAndActiveTrue(start);
	}

}
