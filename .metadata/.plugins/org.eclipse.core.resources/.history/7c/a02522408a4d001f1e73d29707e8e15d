package com.techlabs.app.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.techlabs.app.entity.Employee;
import com.techlabs.app.exception.EmployeeNotFoundException;
import com.techlabs.app.service.EmployeeService;

import jakarta.validation.Valid;

@RestController
public class EmployeeController {

	private EmployeeService employeeService;

	public EmployeeController(EmployeeService employeeService) {
		super();
		this.employeeService = employeeService;
	}

	@GetMapping("/employees")
	public ResponseEntity<List<Employee>> getAllStuddents() {

		return new ResponseEntity<List<Employee>>(employeeService.getAllEmployees(), HttpStatus.OK);
	}

	@GetMapping("/employees/{sid}")
	public ResponseEntity<Employee> getEmployeeById(@Valid @PathVariable(name = "sid") int id) {

		Employee employee = employeeService.getEmployeeById(id);
		if (employee == null)
			throw new RuntimeException("No Employee with id = " + id + " Found");

		return new ResponseEntity<Employee>(employee, HttpStatus.CREATED);
	}

	@DeleteMapping("/employees/{sid}")
	public void deleteEmployee(@PathVariable(name = "sid") int id) {
		Employee employee = employeeService.getEmployeeById(id);
		if (employee == null)
			throw new EmployeeNotFoundException("No Employee with id = " + id + " Found");

		employeeService.deleteEmployee(id);

	}

	@GetMapping("/employee/{empName}")
	public List<Employee> findEmployeeByName(@PathVariable(name = "empName") String name) {
		List<Employee> emp = employeeService.findEmployeeByFirstName(name);
		if (emp == null)
			throw new EmployeeNotFoundException("No Employee with name = " + name + " Found");

		return emp;

	}
	@GetMapping("/employee-email/{empEmail}")
	public List<Employee> findEmployeeByEmail(@PathVariable(name = "empEmail") String email) {
		List<Employee> emp = employeeService.findEmployeeByEmail(email);
		if (emp == null)
			throw new EmployeeNotFoundException("No Employee with email = " + email + " Found");

		return emp;

	}
	@GetMapping("/employee-active/{empActive}")
	public List<Employee> findAllActiveEmployee(@PathVariable(name = "empActive") boolean active) {
		List<Employee> emp = employeeService.findAllActiveEmployee(active);
		if (emp == null)
			throw new EmployeeNotFoundException("No Active Employees Found");

		return emp;

	}
	@GetMapping("/employee/starting/{start}")
	public List<Employee> findEmployeeNameStartingWith(@PathVariable(name = "start") String s) {
		List<Employee> emp = employeeService.findEmployeeNameStartingWith(s);
		if (emp == null)
			throw new EmployeeNotFoundException("No Employee Present having Name Start with "+s);

		return emp;

	}
//	 @GetMapping("/employee/salaryAndDept/{salary}/{dept}")
//	    public List<Employee> findBySalaryGreaterThanAndDepartmentName(@PathVariable(name = "salary") double salary, @PathVariable(name = "dept") String dept) {
//	        List<Employee> emp = employeeService.findBySalaryGreaterThanAndDesignationName(salary, dept);
//	        if (emp == null || emp.isEmpty()) {
//	            throw new EmployeeNotFoundException("No Employee found with salary > " + salary + " and Department = " + dept);
//	        }
//
//	        return emp;
//	    }
	@GetMapping("/employee/salary/{start}/{end}")
	public List<Employee> findEmployeeSalaryBetween(@PathVariable(name = "start") double start, @PathVariable(name = "end") double end) {
		List<Employee> emp = employeeService.findEmployeeSalaryBetween(start,end);
		if (emp == null)
			throw new EmployeeNotFoundException("No Employee having Salary between "+start+" and "+end);

		return emp;

	}
	
	@GetMapping("/employee/count/active")
	public int countActiveEmployees() {
		int count = employeeService.countActiveEmployees();
		if (emp == null)
			throw new EmployeeNotFoundException("No Employee having Salary between "+start+" and "+end);

		return emp;

	}
	@PostMapping("/employees")

	public Employee addEmployee(@Valid @RequestBody Employee employee) {
		employee.setId(0);

		return employeeService.saveAndUpdateEmployee(employee);
	}

	@PutMapping("/employees")
	public ResponseEntity<Employee> updateEmployee(@Valid @RequestBody Employee employee) {
		Employee tempemployee = employeeService.getEmployeeById(employee.getId());
		if (tempemployee == null)
			throw new EmployeeNotFoundException("No Employee with id = " + employee.getId() + " Found");

		return new ResponseEntity<Employee>(employeeService.saveAndUpdateEmployee(employee), HttpStatus.OK);

	}

}
