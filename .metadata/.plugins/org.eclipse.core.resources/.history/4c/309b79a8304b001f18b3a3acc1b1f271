package com.techlabs.app.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.techlabs.app.entity.Employee;
import com.techlabs.app.exception.EmployeeNotFoundException;
import com.techlabs.app.service.EmployeeService;

@RestController
public class EmployeeController {

	private EmployeeService employeeService;

	public EmployeeController(EmployeeService employeeService) {
		super();
		this.employeeService = employeeService;
	}

	@GetMapping("/employees")
	public ResponseEntity<List<Employee>> getAllStuddents() {

		return new ResponseEntity<List<Employee>>(employeeService.getAllEmployees(), HttpStatus.OK);
	}

	@GetMapping("/employees/{sid}")
	public ResponseEntity<Employee> getEmployeeById(@PathVariable(name = "sid") int id) {

		Employee employee = employeeService.getEmployeeById(id);
		if (employee == null)
			throw new RuntimeException("No Employee with id = " + employee.getId() + " Found");

		return new ResponseEntity<Employee>(employee, HttpStatus.CREATED);
	}

	@DeleteMapping("/employees/{sid}")
	public void deleteEmployee(@PathVariable(name = "sid") int id) {
		Employee employee=employeeService.getEmployeeById(id);
		if(employee==null) throw new EmployeeNotFoundException("No Employee with id = " + employee.getId() + " Found")

		employeeService.deleteEmployee(id);

	}

	@PostMapping("/employees")

	public Employee addEmployee(@RequestBody Employee employee) {
		employee.setId(0);
		return employeeService.saveAndUpdateEmployee(employee);
	}

	@PutMapping("/employees")
	public ResponseEntity<Employee> updateEmployee(@RequestBody Employee employee) {
		Employee tempemployee = employeeService.getEmployeeById(employee.getId());
		if (tempemployee == null)
			throw new EmployeeNotFoundException("No Employee with id = " + employee.getId() + " Found");

		return new ResponseEntity<Employee>(employeeService.saveAndUpdateEmployee(employee), HttpStatus.OK);

	}

}
